select( country , ln_death , reg4_y_pred , reg4_res )
summary <- l1 %>% add_row(u1)
knitr::kable(summary,caption="xx")
# Weighted-OLS
reg4 <- lm_robust(ln_death ~ ln_confirmed, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
# Weighted-OLS
reg4 <- lm_robust(ln_death ~ ln_confirmed, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
# Get the predicted y values from the model
df$reg4_y_pred <- reg4$fitted.values
# Calculate the errors of the model
df$reg4_res <- df$ln_death - df$reg4_y_pred
# Find country with largest negative errors
l1 <- df %>% top_n( -5 , reg4_res ) %>%
select( country , ln_death , reg4_y_pred , reg4_res )
# Find country with largest positive errors
u1 <- df %>% top_n( 5 , reg4_res ) %>%
select( country , ln_death , reg4_y_pred , reg4_res )
knitr::kable(l1,caption="Countries with largest negative errors")
knitr::kable(u1,caption="Countries with largest positive errors")
grid.arrange(l1, u1, ncol=2, nrow = 1)
# Get the predicted y values from the model
df$reg4_y_pred <- reg4$fitted.values
# Calculate the errors of the model
df$reg4_res <- df$ln_death - df$reg4_y_pred
# Find country with largest negative errors
l1 <- df %>% top_n( -5 , reg4_res ) %>%
select( country , ln_death , reg4_y_pred , reg4_res )
# Find country with largest positive errors
u1 <- df %>% top_n( 5 , reg4_res ) %>%
select( country , ln_death , reg4_y_pred , reg4_res )
knitr::kable(l1,caption="Countries with largest negative errors")
knitr::kable(u1,caption="Countries with largest positive errors")
# Call the data from github
my_url <- "https://raw.githubusercontent.com/CEU-Economics-and-Business/ECBS-5208-Coding-1-Business-Analytics/master/Class_8/data/clean/WDI_lifeexp_clean.csv"
df <- read_csv( my_url )
####
#
# Quick check on all HISTOGRAMS
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_histogram()+
theme_wsj() +
scale_fill_wsj()
summary( df )
######
# Create new variable: Total GDP:
#     note we could have download an other GDP total variable for this,
#     but for comparison purposes, let use the exact same data and
#     concentrate on difference which are only due to transforming the variables.
df <- df %>% mutate( gdptot = gdppc*population )
######
# Check basic scatter-plots!
#   Two competing models:
#     1) lifeexp = alpha + beta * gdptot
#     2) lifeexp = alpha + beta * gdppc
#
# Where to use log-transformation? - level-level vs level-log vs log-level vs log-log
#
# 1) lifeexp - gdptot: level-level model without scaling
ggplot( df , aes(x = gdptot, y = lifeexp)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Total GDP (2019 int. const. $, PPP )",y = "Life expectancy  (years)")
# The pattern seems non-linear and there are some extreme observations, corresponding to China, US, India
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = gdptot, y = lifeexp)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Total GDP (2019 int. const. $, PPP , ln scale )",y = "Life expectancy  (years)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
# You can change the scale for Total GDP and life-expectancy for checking log-log transformation
ggplot( df , aes(x = gdptot, y = lifeexp ))  +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Total GDP (2017 int. const. $, PPP , ln scale )",y = "Life expectancy  (years, ln scale)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans() )
###
# 2) lifeexp - gdppc: level-level model without scaling
ggplot( df , aes(x = gdppc, y = lifeexp)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "GDP/capita (2019 int. const. $, PPP )",y = "Life expectancy  (years)")
# You can change the scale for GDP/capita for checking log-transformation
ggplot( df , aes(x = gdppc, y = lifeexp)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "GDP/capita (2019 int. const. $, PPP , ln scale )",y = "Life expectancy  (years)") +
scale_x_continuous( trans = log_trans(), breaks = seq(0, 120, by = 20))
# You can change the scale for GDP/capita and life-expectancy for checking log-log transformation
ggplot( df , aes(x = gdppc, y = lifeexp ))  +
geom_point() +
geom_smooth(method="loess")+
labs(x = "GDP/capita (2019 int. const. $, PPP , ln scale )",y = "Life expectancy  (years, ln scale)") +
scale_x_continuous( trans = log_trans(), breaks = seq(0, 120, by = 20))
scale_y_continuous( trans = log_trans() )
####
# Conclusions:
#   1) taking log of gdptot is needed, but still non-linear pattern in data/need to use 'approximation' interpretation
#     - feasible to check and we do it due to learn how to do it,
#           but in practice I would skip this -> over-complicates analysis
#   2) using only gdppc is possible, but need to model the non-linearity in data
#       - Substantive: Level changes is harder to interpret and our aim is not to get $ based comparison
#       - Statistical: log transformation is way better approximation make simplification!
#   3) taking log of gdppc is making the association close to linear!
#   4) taking log for life-expectancy does not matter -> use levels!
#       - Substantive: it does not give better interpretation
#       - Statistical: you can compare models with the same y, no better fit
#       - Remember: simplest the better!
# Take Log of gdp/capita and log GDP total
df <- df %>% mutate( ln_gdppc = log( gdppc ),
ln_gdptot = log( gdptot ) )
######
# Make some models:
#   w ln_gdptot:
#     reg1: lifeexp = alpha + beta * ln_gdptot
#     reg2: lifeexp = alpha + beta_1 * ln_gdptot + beta_2 * ln_gdptot^2
#     reg3: lifeexp = alpha + beta_1 * ln_gdptot + beta_2 * ln_gdptot^2 + beta_3 * ln_gdptot^3
#   w ln_gdppc:
#     reg4: lifeexp = alpha + beta * ln_gdppc
#     reg5: lifeexp = alpha + beta_1 * ln_gdppc + beta_2 * ln_gdppc^2
#     reg6: lifeexp = alpha + beta_1 * ln_gdppc * 1(gdppc < 50) + beta_2 * ln_gdppc * 1(gdppc >= 50)
#   Extra: weighted-ols:
#     reg7: lifeexp = alpha + beta * ln_gdppc, weights: population
###
# Two ways to handle polynomials:
#
# 1) Add powers of the variable(s) to the dataframe:
df <- df %>% mutate( ln_gdptot_sq = ln_gdptot^2,
ln_gdptot_cb = ln_gdptot^3,
ln_gdppc_sq = ln_gdppc^2 )
#
# 2) Use 'poly(x,n)' function, which creates polynomials of x up to order n
#     use this approach for graphs! may use it for models:
#                   positive - simpler, less new variables,
#                   negative - uglier names, harder to compare
#     Note: poly() creates rotates your variables automatically to get mean independent variables
#       use raw = TRUE if you dont want to rotate your variables.
# Do the regressions
#
# Built in regression in R
reg_b <- lm( lifeexp ~ ln_gdptot , data = df )
reg_b
summary( reg_b )
# formula: y ~ x1 + x2 + ..., note: intercept is automatically added
# drawback: no robust SE, only homoskedastic SEs...
# So instead of lm we use lm_robust from package estimatr
# First model:
reg1 <- lm_robust( lifeexp ~ ln_gdptot , data = df , se_type = "HC2" )
reg1
# Summary statistics
summary( reg1 )
# Visual inspection:
ggplot( data = df, aes( x = ln_gdptot, y = lifeexp ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
# Second and third model with gdptot
reg2 <- lm_robust( lifeexp ~ ln_gdptot + ln_gdptot_sq , data = df )
summary( reg2 )
ggplot( data = df, aes( x = ln_gdptot, y = lifeexp ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
reg3 <- lm_robust( lifeexp ~ ln_gdptot + ln_gdptot_sq + ln_gdptot_cb , data = df )
ggplot( data = df, aes( x = ln_gdptot, y = lifeexp ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,3) , method = lm , color = 'red' )
# Models with gdp per capita
reg4 <- lm_robust( lifeexp ~ ln_gdppc , data = df )
summary( reg4 )
# Interpretation analysis
ggplot( data = df, aes( x = ln_gdppc, y = lifeexp ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
reg5 <- lm_robust( lifeexp ~ ln_gdppc + ln_gdppc_sq , data = df )
ggplot( data = df, aes( x = ln_gdppc, y = lifeexp ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
# Regression with piecewise linear spline:
# 1st define the cutoff for gdp per capita
cutoff<- 50
# 2nd we use a log transformation -> cutoff needs to be transformed as well
cutoff_ln<- log( cutoff )
# Use simple regression with the lspline function
?lspline
reg6 <- lm_robust(lifeexp ~ lspline( ln_gdppc , cutoff_ln ), data = df )
summary( reg6 )
ggplot( data = df, aes( x = ln_gdppc, y = lifeexp ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
# Weighted-OLS: use reg4 setup and weight with population
reg7 <- lm_robust(lifeexp ~ ln_gdppc, data = df , weights = population)
summary( reg7 )
ggplot(data = df, aes(x = ln_gdppc, y = lifeexp)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')+
scale_size(range = c(1, 15)) +
coord_cartesian(ylim = c(50, 85)) +
labs(x = "ln(GDP per capita, thousand US dollars) ",y = "Life expectancy  (years)")+
annotate("text", x = 4, y = 80, label = "USA", size=5)+
annotate("text", x = 2.7, y = 79, label = "China", size=5)+
annotate("text", x = 2,  y = 68, label = "India", size=5)
#####
# Creating model summary with texreg
data_out <- "~/OneDrive/CEU - Budapest/02-Coding/Class_8/out/"
htmlreg( list(reg1 , reg2 , reg3 , reg4 , reg5 , reg6 , reg7),
type = 'html',
custom.model.names = c("GDP total - linear","GDP total - quadratic","GDP total - cubic",
"GDP/capita - linear","GDP/capita - quadratic","GDP/capita - PLS",
"GDP/capita - weighted linear"),
caption = "Modelling life expectancy and different wealth measures of countries",
file = paste0( data_out ,'model_comparison.html'), include.ci = FALSE)
#####
# Based on model comparison our chosen model is reg4 - lifeexp ~ ln_gdppc
#   Substantive: - level-log interpretation works properly for countries
#                - magnitude of coefficients are meaningful
#   Statistical: - simple model, easy to interpret
#                - Comparatively high R2 and captures variation well
######
# Residual analysis.
# lm_robust output is an `object` or `list` with different elements
# Check the `Value` section
?lm_robust
# Get the predicted y values from the model
df$reg4_y_pred <- reg4$fitted.values
# Calculate the errors of the model
df$reg4_res <- df$lifeexp - df$reg4_y_pred
# Find countries with largest negative errors
df %>% top_n( -5 , reg4_res ) %>%
select( country , lifeexp , reg4_y_pred , reg4_res )
# Find countries with largest positive errors
df %>% top_n( 5 , reg4_res ) %>%
select( country , lifeexp , reg4_y_pred , reg4_res )
#################################
## Testing hypothesis
#
##
# 1) Coefficient is equal to 0:
# Implemented by default...
summary( reg4 )
# 2) Coefficient is equal to your favorite value
library(car)
# Let test: H0: ln_gdppc = 5, HA: ln_gdppc neq 5
linearHypothesis( reg4 , "ln_gdppc = 5")
# Interpretation: p-value=0.13 which is more than the 5% confidence interval
# we cannot reject the null hypothesis. So ln_gdppc = 5
# 3) Or two coefficients are the same in one model:
#   in piecewise linear spline, the two coefficients are the same
summary( reg6 )
#   H0: lspline(ln_gdppc, cutoff_ln)1 - lspline(ln_gdppc, cutoff_ln)2 = 0
#   HA: lspline(ln_gdppc, cutoff_ln)1 - lspline(ln_gdppc, cutoff_ln)2 neq 0
linearHypothesis( reg6 , "lspline(ln_gdppc, cutoff_ln)1 = lspline(ln_gdppc, cutoff_ln)2")
round(reg4$statistic[2],2)
reg4$p.value[2]
# 2) Coefficient is equal to your favorite value
library(car)
# Let test: H0: ln_gdppc = 5, HA: ln_gdppc neq 5
linearHypothesis( reg4 , "ln_gdppc = 5")
##
# 1) Coefficient is equal to 0:
# Implemented by default...
summary( reg4 )
## Testing hypothesis
# Let test: H0:beta = 0, HA:beta neq 0
summary( reg4 )
# The estimated t-statistics is `round(reg4$statistic[2],2)`, with p-value: `reg4$p.value[2]`.
# Thus we reject the $H_0$, which means the life expectancy is not uncorrelated with GDP per capita.
knitr::opts_chunk$set(echo = TRUE)
# Clear memory
rm(list=ls())
# Load packages
library(tidyverse)
require(scales)
library(lspline)
library(estimatr)
library(texreg)
library(ggthemes)
library(WDI)
library(magrittr)
library(moments)
library(gridExtra)
# Import data
data_in <- "~/Documents/GitHub/Assignment-1/data/"
df <- read_csv(paste0(data_in,"clean/covid_pop_10_15_2020_clean.csv"))
summary(df)
confirmed_cases <- df %>%
summarise(
mean     = round( mean(confirmed), 0),
median   = median(confirmed),
min      = min(confirmed),
max      = max(confirmed),
std      = round( sd(confirmed), 0))
nb_of_death <- df %>%
summarise(
mean     = round( mean(death), 0),
median   = median(death),
min      = min(death),
max      = max(death),
std      = round( sd(death), 0))
summary <- confirmed_cases %>% add_row( nb_of_death)
summary <- mutate (summary, variable = c("confirmed cases" , "nb of death"))
knitr::kable(summary,caption="Summary for the number of registered death caused by covid and registered covid cases")
# Histograms
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =1000,col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =10000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
df %>% filter( confirmed > 2000000, death > 50000 )
# The model investigated is: death = alpha + beta * confirmed
# Check the possible different ln transformation for the variables with plotting different scatter- plots with lo(w)ess.
# 1) Nb of death - confirmed cases: level-level model without scaling
p1 <- ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "confirmed cases",y = "nb of death")
# Change the scale for confirmed cases for checking log-transformation
p2 <- ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "confirmed cases,ln scale",y = "nb of death")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
# Change the scale for confirmed cases and nb of death for checking log-log transformation
p3 <- ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "confirmed cases,ln scale",y = "nb of death, ln scale")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans() )
library(gridExtra)
grid.arrange(p1, p2, p3 , ncol=3, nrow = 1)
# Take Log
df <- df %>% mutate( ln_confirmed = log( confirmed ),
ln_death = log( death ) )
df <- subset(df, ln_death!= -Inf)
# Simple linear regression
reg1 <- lm_robust (ln_death ~ ln_confirmed  , data = df, se_type = "HC2")
summary( reg1 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
# Quadratic regression
#  Add powers of the "confirmed" variable to the dataframe:
df <- df %>% mutate( ln_confirmed_sq = ln_confirmed^2)
reg2 <- lm_robust (ln_death ~ ln_confirmed + ln_confirmed_sq, data = df)
summary( reg2 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
# Regression with piecewise linear spline
cutoff_ln <- log( 50 )
reg3<- lm_robust(ln_death ~ lspline( ln_confirmed , cutoff_ln ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death  ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
# Weighted-OLS
reg4 <- lm_robust(ln_death ~ ln_confirmed, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
# Creating model summary with texreg
data_out <-"~/Documents/GitHub/Assignment-1/out/"
htmlreg( list(reg1 , reg2 , reg3 , reg4),
type = 'html',
custom.model.names = c("Linear model","Quadratic model",
"PLS model", "Weighted linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
file = paste0( data_out ,'model_comparison.html'), include.ci = FALSE)
# Weighted-OLS
reg4 <- lm_robust(ln_death ~ ln_confirmed, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
## Testing hypothesis
# Let test: H0:beta = 0, HA:beta neq 0
summary( reg4 )
# The estimated t-statistics is `round(reg4$statistic[2],2)`, with p-value: `reg4$p.value[2]`.
# Thus we reject the $H_0$, which means the life expectancy is not uncorrelated with GDP per capita.
# Get the predicted y values from the model
df$reg4_y_pred <- reg4$fitted.values
# Calculate the errors of the model
df$reg4_res <- df$ln_death - df$reg4_y_pred
# Find country with largest negative errors
l1 <- df %>% top_n( -5 , reg4_res ) %>%
select( country , ln_death , reg4_y_pred , reg4_res )
# Find country with largest positive errors
u1 <- df %>% top_n( 5 , reg4_res ) %>%
select( country , ln_death , reg4_y_pred , reg4_res )
knitr::kable(l1,caption="Countries with largest negative errors")
knitr::kable(u1,caption="Countries with largest positive errors")
texreg( list(reg1 , reg2 , reg3 , reg4),
type = 'pdf',
custom.model.names = c("Linear model","Quadratic model",
"PLS model", "Weighted linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
include.ci = FALSE)
texreg::htmlreg(l=list(reg1 , reg2 , reg3 , reg4),
include.fstatistic = TRUE)
texreg(list(reg1 , reg2 , reg3 , reg4))
texreg::htmlreg(l=list(reg1 , reg2 , reg3 , reg4),
include.fstatistic = TRUE)
texreg(list(reg1 , reg2 , reg3 , reg4))
htmlreg(list(reg1 , reg2 , reg3 , reg4), star.symbol = "\\*", doctype = FALSE, center = FALSE, caption = "")
texreg(reg1, table = FALSE, use.packages = FALSE)
texreg(list(reg1 , reg2 , reg3 , reg4),
custom.model.names = c("Linear model","Quadratic model",
"PLS model", "Weighted linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
table = FALSE, use.packages = FALSE)
texreg(list(reg1 , reg2 , reg3 , reg4),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
table = FALSE, use.packages = FALSE)
texreg((reg1 , reg2 , reg3 , reg4),
texreg(list(reg1 , reg2 , reg3 , reg4),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
table = FALSE, use.packages = FALSE)
texreg(reg1,
custom.model.names = c("Linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
table = FALSE, use.packages = FALSE)
texreg(reg1,reg2,
custom.model.names = c("Linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
table = FALSE, use.packages = FALSE)
summary(df)
summary(df)
summary(df)
df
summary(df)
glimpse (df)
knitr::opts_chunk$set(echo = TRUE)
# Clear memory
rm(list=ls())
# Load packages
library(tidyverse)
require(scales)
library(lspline)
library(estimatr)
library(texreg)
library(ggthemes)
library(WDI)
library(magrittr)
library(moments)
library(gridExtra)
# Import data
data_in <- "~/Documents/GitHub/Assignment-1/data/"
df <- read_csv(paste0(data_in,"clean/covid_pop_10_15_2020_clean.csv"))
summary(df)
glimpse (df)
# Histograms
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =1000,col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =10000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
# Histograms
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =1000,col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =100000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
# Histograms
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =10000,col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =100000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
# Histograms
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =1000,fill= "darkorange", col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =100000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
# Histograms
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =5000,fill= "darkorange", col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =100000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
# Weighted-OLS
reg4 <- lm_robust(ln_death ~ ln_confirmed, data = df , weights = population)
