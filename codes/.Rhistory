labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =100000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
# Histograms
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =5000,fill= "darkorange", col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =100000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
# Weighted-OLS
reg4 <- lm_robust(ln_death ~ ln_confirmed, data = df , weights = population)
knitr::opts_chunk$set(echo = TRUE)
# Clear memory
rm(list=ls())
# Load packages
library(tidyverse)
require(scales)
library(lspline)
library(estimatr)
library(texreg)
library(ggthemes)
library(WDI)
library(magrittr)
library(moments)
library(gridExtra)
# Import data
data_in <- "~/Documents/GitHub/Assignment-1/data/"
df <- read_csv(paste0(data_in,"clean/covid_pop_10_15_2020_clean.csv"))
glimpse (df)
summary(df)
df %>% filter( confirmed > 2000000, death > 50000 )
d1 <- df %>% filter( confirmed > 2000000, death > 50000 )
knitr::kable(d1,caption="Extreme values")
d1 <- df %>% filter( confirmed > 2000000, death > 50000 )
knitr::kable(d1,caption="Extreme values")
confirmed_cases <- df %>%
summarise(
mean     = round( mean(confirmed), 0),
median   = median(confirmed),
min      = min(confirmed),
max      = max(confirmed),
std      = round( sd(confirmed), 0))
nb_of_death <- df %>%
summarise(
mean     = round( mean(death), 0),
median   = median(death),
min      = min(death),
max      = max(death),
std      = round( sd(death), 0))
summary <- confirmed_cases %>% add_row( nb_of_death)
summary <- mutate (summary, variable = c("confirmed cases" , "nb of death"))
knitr::kable(summary,caption="Summary for the number of registered death caused by covid and registered covid cases")
d1 <- df %>% filter( confirmed > 2000000, death > 50000 )
knitr::kable(d1,caption="Extreme values")
# Histograms
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =5000,fill= "darkorange", col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =100000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
confirmed_cases <- df %>%
summarise(
mean     = round( mean(confirmed), 0),
median   = median(confirmed),
min      = min(confirmed),
max      = max(confirmed),
std      = round( sd(confirmed), 0))
nb_of_death <- df %>%
summarise(
mean     = round( mean(death), 0),
median   = median(death),
min      = min(death),
max      = max(death),
std      = round( sd(death), 0))
summary <- confirmed_cases %>% add_row( nb_of_death)
summary <- mutate (summary, variable = c("confirmed cases" , "nb of death"))
knitr::kable(summary,caption="Summary for the number of registered death caused by covid and registered covid cases")
# Histograms
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =2000,fill= "darkorange", col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =100000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
# Histograms
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =2000,fill= "darkorange", col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =50000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
# Histograms
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =100000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =2000,fill= "darkorange", col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
# Histograms
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =100000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =5000,fill= "darkorange", col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
# The model investigated is: death = alpha + beta * confirmed
# Check the possible different ln transformation for the variables with plotting different scatter- plots with lo(w)ess.
# 1) Nb of death - confirmed cases: level-level model without scaling
p1 <- ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "confirmed cases",y = "nb of death")+
theme(text = element_text(size = 10))
# Change the scale for confirmed cases for checking log-transformation
p2 <- ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "confirmed cases,ln scale",y = "nb of death")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
# Change the scale for confirmed cases and nb of death for checking log-log transformation
p3 <- ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "confirmed cases,ln scale",y = "nb of death, ln scale")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans() )
library(gridExtra)
grid.arrange(p1, p2, p3 , ncol=3, nrow = 1)
# The model investigated is: death = alpha + beta * confirmed
# Check the possible different ln transformation for the variables with plotting different scatter- plots with lo(w)ess.
# 1) Nb of death - confirmed cases: level-level model without scaling
p1 <- ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "confirmed cases",y = "nb of death")+
theme(text = element_text(size = 10))
# Change the scale for confirmed cases for checking log-transformation
p2 <- ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "confirmed cases,ln scale",y = "nb of death")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
theme(text = element_text(size = 10))
# Change the scale for confirmed cases and nb of death for checking log-log transformation
p3 <- ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "confirmed cases,ln scale",y = "nb of death, ln scale")+
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans() )+
theme(text = element_text(size = 10))
library(gridExtra)
grid.arrange(p1, p2, p3 , ncol=3, nrow = 1)
# Weighted-OLS
reg4 <- lm_robust(ln_death ~ ln_confirmed, data = df , weights = population)
# Take Logs
df <- df %>% mutate( ln_confirmed = log( confirmed ),
ln_death = log( death ) )
df <- subset(df, ln_death!= -Inf)
# Simple linear regression
reg1 <- lm_robust (ln_death ~ ln_confirmed  , data = df, se_type = "HC2")
summary( reg1 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
# Quadratic regression
#  Add powers of the "confirmed" variable to the dataframe:
df <- df %>% mutate( ln_confirmed_sq = ln_confirmed^2)
reg2 <- lm_robust (ln_death ~ ln_confirmed + ln_confirmed_sq, data = df)
summary( reg2 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
# Regression with piecewise linear spline
cutoff_ln <- log( 50 )
reg3<- lm_robust(ln_death ~ lspline( ln_confirmed , cutoff_ln ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death  ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
# Weighted-OLS
reg4 <- lm_robust(ln_death ~ ln_confirmed, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
# Creating model summary with texreg
data_out <-"~/Documents/GitHub/Assignment-1/out/"
htmlreg( list(reg1 , reg2 , reg3 , reg4),
type = 'html',
custom.model.names = c("Linear model","Quadratic model",
"PLS model", "Weighted linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
file = paste0( data_out ,'model_comparison.html'), include.ci = FALSE)
# Weighted-OLS
reg4 <- lm_robust(ln_death ~ ln_confirmed, data = df , weights = population)
texreg(reg4,
custom.model.names = c("Weighted linear regression, using population as weights"),
table = FALSE, use.packages = FALSE)
# Visualization
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
labs(x = "confirmed cases,ln scale",y = "nb of death, ln scale", title="Weighted linear regression, using population as weights")+
geom_smooth(aes(weight = population), method = "lm", color='red')+
theme(text = element_text(size = 10))
texreg(reg1,
custom.model.names = c("Linear model"),
table = FALSE, use.packages = FALSE)
texreg( list(reg1 , reg2 , reg3 , reg4),
custom.model.names = c("Linear model","Quadratic model",
"PLS model", "Weighted linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
include.ci = FALSE)
# Histograms
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =500000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =5000,fill= "darkorange", col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
# Histograms
ggplot(data = df, aes(x=confirmed)) +
geom_histogram(binwidth =300000, fill= "darkorange",col="black", alpha=0.7)+
labs(x="number of registered covid cases", y="Absolute Frequency") +
theme_bw()
ggplot(data = df, aes(x=death)) +
geom_histogram(binwidth =5000,fill= "darkorange", col="black", alpha=0.7)+
labs(x="number of registered death due to covid", y="Absolute Frequency") +
theme_bw()
texreg(reg1,
custom.model.names = c("Linear model"),
table = FALSE, use.packages = FALSE)
texreg( list(reg1 , reg2 , reg3 , reg4),
custom.model.names = c("Linear model","Quadratic model",
"PLS model", "Weighted linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
table = TRUE, use.packages = FALSE)
texreg(reg1,
custom.model.names = c("Linear model"),
table = FALSE, use.packages = FALSE)
texreg( list(reg1 , reg2 , reg3 , reg4),
custom.model.names = c("Linear model","Quadratic model",
"PLS model", "Weighted linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
table = FALSE, use.packages = FALSE)
texreg(reg1,
custom.model.names = c("Linear model"),
table = FALSE, use.packages = FALSE)
texreg( list(reg1 , reg2 , reg3 , reg4),
custom.model.names = c("Linear model","Quadratic model",
"PLS model", "Weighted linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
table = FALSE, use.packages = TRUE)
# Weighted-OLS
reg4 <- lm_robust(ln_death ~ ln_confirmed, data = df , weights = population)
texreg(reg4,
custom.model.names = c("Weighted linear regression, using population as weights"),
table = FALSE, use.packages = FALSE)
r1 <- texreg(reg1,
custom.model.names = c("Linear model"),
table = FALSE, use.packages = FALSE)
r2 <- texreg(reg2,
custom.model.names = c("Quadratic regression"),
table = FALSE, use.packages = FALSE)
r3 <- texreg(reg3,
custom.model.names = c("Piecewise Linear Spline"),
table = FALSE, use.packages = FALSE)
r1 <- texreg(reg1,
custom.model.names = c("Linear model"),
table = FALSE, use.packages = FALSE)
r2 <- texreg(reg2,
custom.model.names = c("Quadratic regression"),
table = FALSE, use.packages = FALSE)
r4 <- texreg(reg4,
custom.model.names = c("Weighted linear regression, using population as weights"),
table = FALSE, use.packages = FALSE)
summary_2 <- r1 %>% add_row(r2) %>% add_row(r4)
r1 <- texreg(reg1,
custom.model.names = c("Linear model"),
table = FALSE, use.packages = FALSE)
r2 <- texreg(reg2,
custom.model.names = c("Quadratic regression"),
table = FALSE, use.packages = FALSE)
r4 <- texreg(reg4,
custom.model.names = c("Weighted linear regression, using population as weights"),
table = FALSE, use.packages = FALSE)
summary_2 <- r1 %>% add_column(r2) %>% add_row(r4)
install.packages("stargazer")
library(stargazer)
stargazer(r1, r2, r3, r4,   title="Modèles de régression",single.row=TRUE)
library(stargazer)
stargazer(reg1, reg2, reg3, reg4,   title="Modèles de régression",single.row=TRUE)
library(stargazer)
stargazer(reg1, reg2, reg3, reg4,   title="Modèles de régression",single.row=TRUE)
mtable123 <- mtable('(1)' = reg1,
'(2)' = reg2,
'(3)' = reg3,
coef.style="ci.se.horizontal",
summary.stats = c('R-squared','N'))
install.packages("pander")
library(pander)
library(stargazer)
stargazer(reg1, reg2, reg3, reg4,   title="Modèles de régression",single.row=TRUE)
mtable123 <- mtable('(1)' = reg1,
'(2)' = reg2,
'(3)' = reg3,
coef.style="ci.se.horizontal",
summary.stats = c('R-squared','N'))
detach("package:pander", unload = TRUE)
install.packages("memisc")
library(memisc)
library(stargazer)
stargazer(reg1, reg2, reg3, reg4,   title="Modèles de régression",single.row=TRUE)
mtable123 <- mtable('(1)' = reg1,
'(2)' = reg2,
'(3)' = reg3,
coef.style="ci.se.horizontal",
summary.stats = c('R-squared','N'))
library(stargazer)
stargazer(reg1, reg2, reg3, reg4,   title="Modèles de régression",single.row=TRUE)
mtable123 <- mtable('(1)' = reg1,
'(2)' = reg2,
'(3)' = reg3,
coef.style="ci.se.horizontal")
library(stargazer)
stargazer(reg1, reg2, reg3, reg4, type="text",
title="Modèles de régression", single.row=TRUE,
ci=FALSE, ci.level=0.9, omit.stat=c("f", "ser"), out="resultats2.html")
# Simple linear regression
reg1 <- lm (ln_death ~ ln_confirmed  , data = df)
summary( reg1 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
# Quadratic regression
#  Add powers of the "confirmed" variable to the dataframe:
df <- df %>% mutate( ln_confirmed_sq = ln_confirmed^2)
reg2 <- lm(ln_death ~ ln_confirmed + ln_confirmed_sq, data = df)
summary( reg2 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
# Regression with piecewise linear spline
cutoff_ln <- log( 50 )
reg3<- lm(ln_death ~ lspline( ln_confirmed , cutoff_ln ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death  ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
# Weighted-OLS
reg4 <- lm(ln_death ~ ln_confirmed, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
library(stargazer)
stargazer(reg1, reg2, reg3, reg4, type="text",
title="Modèles de régression", single.row=TRUE,
ci=FALSE, ci.level=0.9, omit.stat=c("f", "ser"), out="resultats2.html")
library(stargazer)
stargazer(reg1, reg2, reg3, reg4,  p.auto = TRUE, title="Modèles de régression",single.row=TRUE, out="resultats1.html")
# Creating model summary with texreg
data_out <-"~/Documents/GitHub/Assignment-1/out/"
htmlreg( list(reg1 , reg2 , reg3 , reg4),
type = 'html',
custom.model.names = c("Linear model","Quadratic model",
"PLS model", "Weighted linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
file = paste0( data_out ,'model_comparison.html'), include.ci = FALSE)
# Simple linear regression
reg1 <- lm (ln_death ~ ln_confirmed  , data = df)
summary( reg1 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
# Quadratic regression
#  Add powers of the "confirmed" variable to the dataframe:
df <- df %>% mutate( ln_confirmed_sq = ln_confirmed^2)
reg2 <- lm(ln_death ~ ln_confirmed + ln_confirmed_sq, data = df)
summary( reg2 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
# Regression with piecewise linear spline
cutoff_ln <- log( 50 )
reg3<- lm(ln_death ~ lspline( ln_confirmed , cutoff_ln ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death  ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
# Weighted-OLS
reg4 <- lm(ln_death ~ ln_confirmed, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
# Simple linear regression
reg1 <- lm (ln_death ~ ln_confirmed  , data = df)
summary( reg1 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
# Quadratic regression
#  Add powers of the "confirmed" variable to the dataframe:
df <- df %>% mutate( ln_confirmed_sq = ln_confirmed^2)
reg2 <- lm(ln_death ~ ln_confirmed + ln_confirmed_sq, data = df)
summary( reg2 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
# Regression with piecewise linear spline
cutoff_ln <- log( 50 )
reg3<- lm(ln_death ~ lspline( ln_confirmed , cutoff_ln ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death  ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
# Weighted-OLS
reg4 <- lm(ln_death ~ ln_confirmed, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
# Creating model summary with texreg
data_out <-"~/Documents/GitHub/Assignment-1/out/"
htmlreg( list(reg1 , reg2 , reg3 , reg4),
type = 'html',
digits = 3,
custom.model.names = c("Linear model","Quadratic model",
"PLS model", "Weighted linear model"),
caption = "Modelling number of registered death due to covid and number of confirmed covid cases",
file = paste0( data_out ,'model_comparison.html'), include.ci = FALSE)
# Simple linear regression
reg1 <- lm (ln_death ~ ln_confirmed  , data = df)
summary( reg1 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
# Quadratic regression
#  Add powers of the "confirmed" variable to the dataframe:
df <- df %>% mutate( ln_confirmed_sq = ln_confirmed^2)
reg2 <- lm(ln_death ~ ln_confirmed + ln_confirmed_sq, data = df)
summary( reg2 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
# Regression with piecewise linear spline
cutoff_ln <- log( 50 )
reg3<- lm(ln_death ~ lspline( ln_confirmed , cutoff_ln ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death  ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
# Weighted-OLS
reg4 <- lm(ln_death ~ ln_confirmed, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
# Simple linear regression
reg1 <- lm (ln_death ~ ln_confirmed  , data = df)
summary( reg1 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
# Quadratic regression
#  Add powers of the "confirmed" variable to the dataframe:
df <- df %>% mutate( ln_confirmed_sq = ln_confirmed^2)
reg2 <- lm(ln_death ~ ln_confirmed + ln_confirmed_sq, data = df)
summary( reg2 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
# Regression with piecewise linear spline
cutoff_ln <- log( 50 )
reg3<- lm(ln_death ~ lspline( ln_confirmed , cutoff_ln ), data = df )
summary( reg3 )
ggplot( data = df, aes( x = ln_confirmed, y = ln_death  ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
# Weighted-OLS
reg4 <- lm(ln_death ~ ln_confirmed, data = df , weights = population)
summary( reg4 )
ggplot(data = df, aes(x = ln_confirmed, y = ln_death)) +
geom_point(data = df, aes(size=population),  color = 'blue', shape = 16, alpha = 0.6,  show.legend=F) +
geom_smooth(aes(weight = population), method = "lm", color='red')
# Get the predicted y values from the model
df$reg4_y_pred <- reg4$fitted.values
# Calculate the errors of the model
df$reg4_res <- df$ln_death - df$reg4_y_pred
# Find country with largest negative errors
l1 <- df %>% top_n( -5 , reg4_res ) %>%
select( country , ln_death , reg4_y_pred , reg4_res )
